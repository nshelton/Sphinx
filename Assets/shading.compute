#pragma kernel CSMain

Texture2D<float4> _GBuffer;
RWTexture2D<float4> _Result;

#include "common.hlsl"
#include "distance.hlsl"

float3 _LightDir;

Texture2D _Matcap;
#define _RNG 1

float ambientOcclusion(in float3 p, in float3 n)
{
    float maxDist = 0.1; // _RenderParam.y;
    float falloff = 2; //_RenderParam.z;
	const int nbIte = 10;
    const float nbIteInv = 1.0 / float(nbIte);
    const float rad = 1.0 - 1.0 * nbIteInv; //Hemispherical factor (self occlusion correction)
    
	float ao = 0.0;
    
    for( int i=0; i<nbIte; i++ ) {

        float l = pow(hash(float(i + hash(_RNG + p.x) + hash(_RNG + p.y) ) ), 5) * maxDist;
        float3 rd = normalize(n + randomHemisphereDir(n, l ) * rad) * l; 
        ao += (l - max(map( p + rd ), 0.0)) / maxDist * falloff;
    }
	
    return clamp(ao * nbIteInv, 0., 1.);
}

float3 getNormal(in float3 p, float t)
{
    float2 e = float2(t, -t);
    return normalize(
        e.xyy * map(p + e.xyy) +
        e.yyx * map(p + e.yyx) +
        e.yxy * map(p + e.yxy) +
        e.xxx * map(p + e.xxx));
}

float softshadow( float3 ro, float3 rd, float thresh)
{
    float res = 1.0;
    float k = 1.0;
    float t = thresh;

    for(int i = 0; i <10; i ++ )
    {
        float3 pos = ro + rd * t;
        float h = map(pos);

        if (h < thresh)
            return 0.0;
            
        res = min( res, k*h/t );
        t += h;
    }

    return res;
}


[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    float depth = _GBuffer[id.xy].x;
    float status = _GBuffer[id.xy].y;

    Ray ray = getRay(id.xy);

    float3 color = float3(0,0,0);
    float thresh = getPixelSize(depth) ;

    float3 pos = ray.origin + depth * ray.direction;

    // if ( id.x > _Resolution.x/2) 
    float3 n = getNormal(pos, thresh);
    float dist = map(pos);

    if ( dist > thresh){
        color = float3(0,0,0);
    }

    float2 muv = n.xy*0.5+float2(0.5,0.5);
    int2 px = muv * 512;
    color = _Matcap[px];
    // float ao = ambientOcclusion(pos, n);
    float s = softshadow(pos , _LightDir, thresh);

    float ambient = 0.3 * dot(max(n, 0), (float3)0.4);
    color = s * color + ambient;

    // color += depth/10 * float3(0.6, 0.6, 0.3);
    if ( status != 1) {
        // color *= 0.6;
        color.r = 1;
        // color = float3(1,0,1);
    }

    // color = n * 0.5 + 0.5;

    _Result[id.xy] = float4(color, depth);
}
